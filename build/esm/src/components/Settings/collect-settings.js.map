{"version":3,"file":"collect-settings.js","sources":["../../../../../../src/components/Settings/collect-settings.ts"],"sourcesContent":["import React from 'react';\n\nimport {IconProps} from '@gravity-ui/uikit';\n\nimport {SettingsSelection} from './Selection/types';\nimport {escapeStringForRegExp, invariant} from './helpers';\n\nexport type SettingsMenu = (SettingsMenuGroup | SettingsMenuItem)[];\n\ninterface SettingsMenuGroup {\n    groupTitle: string;\n    items: SettingsMenuItem[];\n}\n\ninterface SettingsMenuItem {\n    id: string;\n    title: string;\n    icon?: IconProps;\n    withBadge?: boolean;\n    disabled?: boolean;\n}\n\nexport interface SettingsPage {\n    id: string;\n    sections: SettingsPageSection[];\n    hidden?: boolean;\n    withBadge?: boolean;\n}\n\nexport interface SettingsPageSection {\n    id?: string;\n    title: string;\n    header?: React.ReactNode;\n    items: SettingsItem[];\n    hidden?: boolean;\n    withBadge?: boolean;\n    showTitle?: boolean;\n    onlyChild?: boolean;\n}\n\nexport interface SettingsItem {\n    id?: string;\n    title: string;\n    element: React.ReactElement;\n    hidden: boolean;\n    titleComponent?: React.ReactNode;\n    renderTitleComponent?: (highlightedTitle: React.ReactNode | null) => React.ReactNode;\n}\n\nexport interface SelectedSettingsPart {\n    page?: SettingsPage;\n    section?: SettingsPageSection;\n    setting?: SettingsItem;\n}\n\ninterface SettingsDescription {\n    menu: SettingsMenu;\n    pages: Record<string, SettingsPage>;\n}\nexport function getSettingsFromChildren(\n    children: React.ReactNode,\n    searchText = '',\n): SettingsDescription {\n    // 'abc def fg' -> abc.*?cde.*?fg\n    const preparedFilter = escapeStringForRegExp(searchText).replace(/\\s+/g, '.*?');\n    const filterRe = new RegExp(preparedFilter, 'i');\n\n    return getSettingsFromChildrenRecursive(children, '', filterRe);\n}\n\nfunction getSettingsFromChildrenRecursive(\n    children: React.ReactNode,\n    basepath = '',\n    filterRe: RegExp,\n): SettingsDescription {\n    const menu: SettingsMenu = [];\n    const pages: Record<string, SettingsPage> = {};\n    let hasGroup = false;\n    let hasItems = false;\n    React.Children.forEach(children, (element) => {\n        if (!React.isValidElement(element)) {\n            // Ignore non-elements.\n            return;\n        }\n        if (element.type === React.Fragment) {\n            // Transparently support React.Fragment and its children.\n            const {menu: menuFragment, pages: pagesFragment} = getSettingsFromChildrenRecursive(\n                element.props.children,\n                basepath,\n                filterRe,\n            );\n            menu.push(...menuFragment);\n            Object.assign(pages, pagesFragment);\n        } else if (element.props.groupTitle) {\n            if (process.env.NODE_ENV === 'development') {\n                invariant(!hasItems, 'Setting menu must not mix groups and pages on one level');\n            }\n\n            const pageId = `${basepath}/${element.props.id ?? element.props.groupTitle}`;\n            hasGroup = true;\n\n            const {menu: menuFragment, pages: pagesFragment} = getSettingsFromChildrenRecursive(\n                element.props.children,\n                pageId,\n                filterRe,\n            );\n\n            if (process.env.NODE_ENV === 'development') {\n                const hasInnerGroup = menuFragment.some((item) => 'groupTitle' in item);\n                invariant(\n                    !hasInnerGroup,\n                    `Group ${element.props.groupTitle} should not include groups`,\n                );\n            }\n\n            menu.push({\n                groupTitle: element.props.groupTitle,\n                // @ts-ignore\n                items: menuFragment,\n            });\n            Object.assign(pages, pagesFragment);\n        } else {\n            hasItems = true;\n            const pageId = `${basepath}/${element.props.id ?? element.props.title}`;\n\n            if (process.env.NODE_ENV === 'development') {\n                invariant(Boolean(element.props.title), 'Component must include title prop');\n                invariant(!hasGroup, 'Setting menu must not mix groups and pages on one level');\n                invariant(!pages[pageId], `Setting menu page id must be uniq (${pageId})`);\n            }\n\n            pages[pageId] = getSettingsPageFromChildren(element.props.children, filterRe);\n            pages[pageId].id = pageId;\n            menu.push({\n                id: pageId,\n                title: element.props.title,\n                icon: element.props.icon,\n                withBadge: pages[pageId].withBadge,\n                disabled: pages[pageId].hidden,\n            });\n        }\n    });\n    return {menu, pages};\n}\n\nfunction getSettingsPageFromChildren(children: React.ReactNode, filterRe: RegExp): SettingsPage {\n    const page: SettingsPage = {id: '', sections: [], hidden: true};\n    React.Children.forEach(children, (element) => {\n        if (!React.isValidElement(element)) {\n            // Ignore non-elements.\n            return;\n        }\n        if (element.type === React.Fragment) {\n            // Transparently support React.Fragment and its children.\n            const {sections, withBadge, hidden} = getSettingsPageFromChildren(\n                element.props.children,\n                filterRe,\n            );\n            page.sections.push(...sections);\n            page.withBadge = withBadge || page.withBadge;\n            page.hidden = hidden && page.hidden;\n        } else {\n            const {withBadge, showTitle = true} = element.props;\n            const {items, hidden} = getSettingsItemsFromChildren(element.props.children, filterRe);\n            page.withBadge = withBadge || page.withBadge;\n            page.hidden = hidden && page.hidden;\n            page.sections.push({\n                ...element.props,\n                withBadge,\n                items,\n                hidden,\n                showTitle,\n            });\n        }\n    });\n    return page;\n}\n\nfunction getSettingsItemsFromChildren(children: React.ReactNode, filterRe: RegExp) {\n    let hidden = true;\n    const items: SettingsItem[] = [];\n    React.Children.forEach(children, (element) => {\n        if (!React.isValidElement(element)) {\n            // Ignore non-elements.\n            return;\n        }\n        if (element.type === React.Fragment) {\n            // Transparently support React.Fragment and its children.\n            const fragmentItems = getSettingsItemsFromChildren(element.props.children, filterRe);\n            items.push(...fragmentItems.items);\n            hidden = hidden && fragmentItems.hidden;\n        } else {\n            const item: SettingsItem = {\n                ...element.props,\n                element,\n                hidden: !filterRe.test(element.props.title),\n            };\n            items.push(item);\n            hidden = hidden && item.hidden;\n        }\n    });\n    return {items, hidden};\n}\n\nexport function getSelectedSettingsPart(\n    pages: Record<string, SettingsPage>,\n    selection: SettingsSelection,\n): SelectedSettingsPart {\n    if (!selection.settingId && !selection.section && !selection.page) {\n        return {};\n    }\n\n    for (const page of Object.values(pages)) {\n        if (!selection.settingId && !selection.section) {\n            if (selection.page !== page.id) continue;\n\n            return {page};\n        }\n\n        for (const section of page.sections) {\n            if (selection.settingId) {\n                for (const setting of section.items) {\n                    if (setting.id === selection.settingId) {\n                        return {page, section, setting};\n                    }\n                }\n            } else if (\n                selection.section &&\n                ('id' in selection.section\n                    ? selection.section.id === section.id\n                    : selection.section.title === section.title)\n            ) {\n                return {page, section};\n            }\n        }\n    }\n\n    return {};\n}\n"],"names":["React"],"mappings":"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"}