{"version":3,"file":"Settings.mjs","sources":["../../../../src/components/Settings/Settings.tsx"],"sourcesContent":["import React from 'react';\n\nimport {Flex, IconProps, Loader} from '@gravity-ui/uikit';\nimport identity from 'lodash/identity';\n\nimport {Title} from '../Title';\nimport {block} from '../utils/cn';\n\nimport {SettingsSelection} from './Selection';\nimport {\n    SettingsSelectionContextProvider,\n    useSettingsSelectionContext,\n    useSettingsSelectionProviderValue,\n} from './Selection/context';\nimport {isSectionSelected} from './Selection/utils';\nimport {SettingsMenu, SettingsMenuInstance} from './SettingsMenu/SettingsMenu';\nimport {SettingsMenuMobile} from './SettingsMenuMobile/SettingsMenuMobile';\nimport {SettingsSearch} from './SettingsSearch/SettingsSearch';\nimport type {\n    SettingsItem,\n    SettingsMenu as SettingsMenuType,\n    SettingsPageSection,\n} from './collect-settings';\nimport {getSettingsFromChildren} from './collect-settings';\nimport {escapeStringForRegExp} from './helpers';\nimport i18n from './i18n';\n\nimport './Settings.scss';\n\nconst b = block('settings');\n\nexport interface SettingsProps {\n    children: React.ReactNode;\n    title?: string;\n    filterPlaceholder?: string;\n    emptyPlaceholder?: string;\n    initialPage?: string;\n    initialSearch?: string;\n    selection?: SettingsSelection;\n    onPageChange?: (page: string | undefined) => void;\n    renderNotFound?: () => React.ReactNode;\n    renderLoading?: () => React.ReactNode;\n    loading?: boolean;\n    view?: 'normal' | 'mobile';\n    onClose?: () => void;\n    renderRightAdornment?: (item: SettingsItemProps) => React.ReactNode;\n    renderSectionRightAdornment?: (section: SettingsPageSection) => React.ReactNode;\n    showRightAdornmentOnHover?: boolean;\n}\n\nexport interface SettingsGroupProps {\n    id?: string;\n    groupTitle: string;\n    children: React.ReactNode;\n}\n\nexport interface SettingsPageProps {\n    id?: string;\n    title: string;\n    icon?: IconProps;\n    children: React.ReactNode;\n}\n\nexport interface SettingsSectionProps {\n    id?: string;\n    title: string;\n    header?: React.ReactNode;\n    children: React.ReactNode;\n    withBadge?: boolean;\n    showTitle?: boolean;\n    onlyChild?: boolean;\n}\n\nexport interface SettingsItemProps {\n    id?: string;\n    labelId?: string;\n    title: string;\n    highlightedTitle?: React.ReactNode | null;\n    renderTitleComponent?: (highlightedTitle: React.ReactNode | null) => React.ReactNode;\n    align?: 'top' | 'center';\n    children: React.ReactNode;\n    withBadge?: boolean;\n    mode?: 'row';\n    description?: React.ReactNode;\n}\n\nexport interface SettingsContextType\n    extends Pick<\n        SettingsProps,\n        'renderRightAdornment' | 'renderSectionRightAdornment' | 'showRightAdornmentOnHover'\n    > {}\n\nconst SettingsContext = React.createContext<SettingsContextType>({});\n\nexport const useSettingsContext = () => React.useContext(SettingsContext);\n\nexport function Settings({\n    loading,\n    renderLoading,\n    children,\n    view = 'normal',\n    renderRightAdornment,\n    renderSectionRightAdornment,\n    showRightAdornmentOnHover = true,\n    ...props\n}: SettingsProps) {\n    if (loading) {\n        return (\n            <div className={b({loading: true, view})}>\n                {typeof renderLoading === 'function' ? (\n                    renderLoading()\n                ) : (\n                    <Loader className={b('loader')} size=\"m\" />\n                )}\n            </div>\n        );\n    }\n\n    return (\n        <SettingsContext.Provider\n            value={{renderRightAdornment, renderSectionRightAdornment, showRightAdornmentOnHover}}\n        >\n            <SettingsContent view={view} {...props}>\n                {children}\n            </SettingsContent>\n        </SettingsContext.Provider>\n    );\n}\n\nconst getPageTitleById = (menu: SettingsMenuType, activePage: string) => {\n    for (const firstLevel of menu) {\n        if ('groupTitle' in firstLevel) {\n            for (const secondLevel of firstLevel.items)\n                if (secondLevel.id === activePage) return secondLevel.title;\n        } else if (firstLevel.id === activePage) return firstLevel.title;\n    }\n\n    return '';\n};\n\ntype SettingsContentProps = Omit<SettingsProps, 'loading' | 'renderLoading'>;\nfunction SettingsContent({\n    initialPage,\n    initialSearch,\n    selection,\n    children,\n    renderNotFound,\n    title = i18n('label_title'),\n    filterPlaceholder = i18n('label_filter-placeholder'),\n    emptyPlaceholder = i18n('label_empty-placeholder'),\n    view,\n    onPageChange,\n    onClose,\n}: SettingsContentProps) {\n    const {renderSectionRightAdornment, showRightAdornmentOnHover} = useSettingsContext();\n\n    const [search, setSearch] = React.useState(initialSearch ?? '');\n    const {menu, pages} = getSettingsFromChildren(children, search);\n\n    const selected = useSettingsSelectionProviderValue(pages, selection);\n\n    const pageKeys = Object.keys(pages);\n    const selectionInitialPage =\n        selected.page && pageKeys.includes(selected.page.id) ? selected.page.id : undefined;\n    const [selectedPage, setCurrentPage] = React.useState<string | undefined>(\n        selectionInitialPage ||\n            (initialPage && pageKeys.includes(initialPage) ? initialPage : undefined),\n    );\n    const searchInputRef = React.useRef<HTMLInputElement>(null);\n    const menuRef = React.useRef<SettingsMenuInstance>(null);\n    const isMobile = view === 'mobile';\n\n    React.useEffect(() => {\n        menuRef.current?.clearFocus();\n    }, [search]);\n\n    React.useEffect(() => {\n        const handler = () => {\n            menuRef.current?.clearFocus();\n        };\n        window.addEventListener('click', handler);\n        return () => {\n            window.removeEventListener('click', handler);\n        };\n    }, []);\n\n    let activePage = selectedPage;\n    if (!activePage || pages[activePage]?.hidden) {\n        activePage = Object.values(pages).find(({hidden}) => !hidden)?.id;\n    }\n\n    const handlePageChange = (newPage: string | undefined) => {\n        setCurrentPage((prevPage) => {\n            if (prevPage !== newPage) {\n                onPageChange?.(newPage);\n            }\n            return newPage;\n        });\n    };\n\n    React.useEffect(() => {\n        if (activePage !== selectedPage) {\n            handlePageChange(activePage);\n        }\n    });\n\n    React.useEffect(() => {\n        if (!selectionInitialPage) return;\n        setCurrentPage(selectionInitialPage);\n    }, [selectionInitialPage]);\n\n    React.useEffect(() => {\n        if (selected.selectedRef?.current) {\n            selected.selectedRef.current.scrollIntoView();\n        }\n    }, [selected.selectedRef]);\n\n    const renderSetting = ({title: settingTitle, element}: SettingsItem) => {\n        return (\n            <div key={settingTitle} className={b('section-item')}>\n                {React.cloneElement(element, {\n                    ...element.props,\n                    highlightedTitle:\n                        search && settingTitle ? prepareTitle(settingTitle, search) : settingTitle,\n                })}\n            </div>\n        );\n    };\n\n    const renderSection = (page: string, section: SettingsPageSection) => {\n        const isSelected = isSectionSelected(selected, page, section);\n\n        return (\n            <div\n                key={section.title}\n                className={b('section', {selected: isSelected, 'only-child': section.onlyChild})}\n                ref={isSelected ? selected.selectedRef : undefined}\n            >\n                {section.showTitle && (\n                    <h3 className={b('section-heading')}>\n                        {renderSectionRightAdornment ? (\n                            <Flex gap={2} alignItems={'center'}>\n                                {section.title}\n                                <div\n                                    className={b('section-right-adornment', {\n                                        hidden: showRightAdornmentOnHover,\n                                    })}\n                                >\n                                    {renderSectionRightAdornment(section)}\n                                </div>\n                            </Flex>\n                        ) : (\n                            section.title\n                        )}\n                    </h3>\n                )}\n\n                {section.header &&\n                    (isMobile ? (\n                        <div className={b('section-subheader')}>{section.header}</div>\n                    ) : (\n                        section.header\n                    ))}\n\n                {section.items.map((setting) => (setting.hidden ? null : renderSetting(setting)))}\n            </div>\n        );\n    };\n\n    const renderPageContent = (page: string | undefined) => {\n        if (!page) {\n            return typeof renderNotFound === 'function' ? (\n                renderNotFound()\n            ) : (\n                <div className={b('not-found')}>{emptyPlaceholder}</div>\n            );\n        }\n\n        const filteredSections = pages[page].sections.filter((section) => !section.hidden);\n\n        return (\n            <React.Fragment>\n                {!isMobile && (\n                    <Title hasSeparator onClose={onClose}>\n                        {getPageTitleById(menu, page)}\n                    </Title>\n                )}\n\n                <div className={b('content')}>\n                    {filteredSections.map((section) => renderSection(page, section))}\n                </div>\n            </React.Fragment>\n        );\n    };\n\n    return (\n        <SettingsSelectionContextProvider value={selected}>\n            <div className={b({view})}>\n                {isMobile ? (\n                    <React.Fragment>\n                        <SettingsSearch\n                            inputRef={searchInputRef}\n                            className={b('search')}\n                            initialValue={initialSearch}\n                            onChange={setSearch}\n                            autoFocus={false}\n                            inputSize={'xl'}\n                        />\n                        <SettingsMenuMobile\n                            items={menu}\n                            onChange={handlePageChange}\n                            activeItemId={activePage}\n                            className={b('tabs')}\n                        />\n                    </React.Fragment>\n                ) : (\n                    <div\n                        className={b('menu')}\n                        onClick={() => {\n                            if (searchInputRef.current) {\n                                searchInputRef.current.focus();\n                            }\n                        }}\n                        onKeyDown={(event) => {\n                            if (menuRef.current) {\n                                if (menuRef.current.handleKeyDown(event)) {\n                                    event.preventDefault();\n                                }\n                            }\n                        }}\n                    >\n                        <Title>{title}</Title>\n                        <SettingsSearch\n                            inputRef={searchInputRef}\n                            className={b('search')}\n                            initialValue={initialSearch}\n                            onChange={setSearch}\n                            placeholder={filterPlaceholder}\n                            autoFocus\n                        />\n                        <SettingsMenu\n                            ref={menuRef}\n                            items={menu}\n                            onChange={handlePageChange}\n                            activeItemId={activePage}\n                        />\n                    </div>\n                )}\n                <div className={b('page')}>{renderPageContent(activePage)}</div>\n            </div>\n        </SettingsSelectionContextProvider>\n    );\n}\n\nSettings.Group = function SettingsGroup({children}: SettingsGroupProps) {\n    return <React.Fragment>{children}</React.Fragment>;\n};\n\nSettings.Page = function SettingsPage({children}: SettingsPageProps) {\n    return <React.Fragment>{children}</React.Fragment>;\n};\n\nSettings.Section = function SettingsSection({children}: SettingsSectionProps) {\n    return <React.Fragment>{children}</React.Fragment>;\n};\n\nSettings.Item = function SettingsItem(setting: SettingsItemProps) {\n    const {\n        id,\n        labelId,\n        highlightedTitle,\n        children,\n        align = 'center',\n        withBadge,\n        renderTitleComponent = identity,\n        mode,\n        description,\n    } = setting;\n\n    const selected = useSettingsSelectionContext();\n    const isSettingSelected = selected.setting && selected.setting.id === id;\n\n    const {renderRightAdornment, showRightAdornmentOnHover} = useSettingsContext();\n    const titleNode = (\n        <span className={b('item-title', {badge: withBadge})}>\n            {renderTitleComponent(highlightedTitle)}\n        </span>\n    );\n    return (\n        <div\n            className={b('item', {align, mode, selected: isSettingSelected})}\n            ref={isSettingSelected ? selected.selectedRef : undefined}\n        >\n            <label className={b('item-heading')} id={labelId}>\n                {renderRightAdornment ? (\n                    <Flex className={b('item-title-wrapper')} gap={3}>\n                        {titleNode}\n                        <div\n                            className={b('item-right-adornment', {\n                                hidden: showRightAdornmentOnHover,\n                            })}\n                        >\n                            {renderRightAdornment(setting)}\n                        </div>\n                    </Flex>\n                ) : (\n                    titleNode\n                )}\n                {description ? <span className={b('item-description')}>{description}</span> : null}\n            </label>\n            <div className={b('item-content')}>{children}</div>\n        </div>\n    );\n};\n\nfunction prepareTitle(string: string, search: string) {\n    let temp = string.slice(0);\n    const title: React.ReactNode[] = [];\n    const parts = escapeStringForRegExp(search).split(' ').filter(Boolean);\n    let key = 0;\n    for (const part of parts) {\n        const regex = new RegExp(part, 'ig');\n        const match = regex.exec(temp);\n        if (match) {\n            const m = match[0];\n            const i = match.index;\n            if (i > 0) {\n                title.push(temp.slice(0, i));\n            }\n            title.push(\n                <strong key={key++} className={b('found')}>\n                    {m}\n                </strong>,\n            );\n            temp = temp.slice(i + m.length);\n        }\n    }\n    if (temp) {\n        title.push(temp);\n    }\n    return title;\n}\n"],"names":["React"],"mappings":"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"}