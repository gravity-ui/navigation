{"version":3,"file":"MobileHeader.mjs","sources":["../../../../src/components/MobileHeader/MobileHeader.tsx"],"sourcesContent":["import React, {useCallback, useEffect, useMemo, useState} from 'react';\n\nimport {useForwardRef} from '../../hooks/useForwardRef';\nimport {Content, RenderContentType} from '../Content';\nimport {Drawer, DrawerItem, DrawerItemProps} from '../Drawer/Drawer';\nimport {MobileLogo} from '../MobileLogo';\nimport {LogoProps} from '../types';\nimport {block} from '../utils/cn';\n\nimport {Burger} from './Burger/Burger';\nimport {BurgerMenu, BurgerMenuInnerProps} from './BurgerMenu/BurgerMenu';\nimport {\n    BURGER_PANEL_ITEM_ID,\n    MOBILE_HEADER_COMPACT_HEIGHT,\n    MOBILE_HEADER_EVENT_NAMES,\n    MOBILE_HEADER_EXPANDED_HEIGHT,\n} from './constants';\nimport i18n from './i18n';\nimport {MobileHeaderEvent, MobileHeaderEventOptions, MobileMenuItem} from './types';\n\nimport './MobileHeader.scss';\n\nconst b = block('mobile-header');\n\ntype PanelName = DrawerItemProps['id'] | null;\n\ninterface BurgerMenuProps extends Omit<BurgerMenuInnerProps, 'renderFooter'> {\n    renderFooter?: (data: {size: number; isCompact: boolean}) => React.ReactNode;\n}\n\ninterface PanelItem extends Omit<DrawerItemProps, 'visible'> {}\n\nexport interface MobileHeaderProps {\n    logo: LogoProps;\n    burgerMenu: BurgerMenuProps;\n    burgerCloseTitle?: string;\n    burgerOpenTitle?: string;\n    panelItems?: PanelItem[];\n    renderContent?: RenderContentType;\n    sideItemRenderContent?: RenderContentType;\n    onEvent?: (itemName: string, eventName: MobileHeaderEvent) => void;\n    onClosePanel?: () => void;\n    className?: string;\n    contentClassName?: string;\n}\n\nexport const MobileHeader = React.forwardRef<HTMLDivElement, MobileHeaderProps>(\n    (\n        {\n            logo,\n            burgerMenu,\n            burgerCloseTitle = i18n('burger_button_close'),\n            burgerOpenTitle = i18n('burger_button_open'),\n            panelItems = [],\n            renderContent,\n            sideItemRenderContent,\n            onClosePanel,\n            onEvent,\n            className,\n            contentClassName,\n        },\n        ref,\n    ): React.ReactElement => {\n        const targetRef = useForwardRef<HTMLDivElement>(ref);\n        const [compact] = useState(true);\n        const [visiblePanel, setVisiblePanel] = useState<PanelName>(null);\n\n        // for expand top panel cases (i.e. switch service panel). Will be removed if not used in future design\n        const size = compact ? MOBILE_HEADER_COMPACT_HEIGHT : MOBILE_HEADER_EXPANDED_HEIGHT;\n\n        const onPanelToggle = useCallback(\n            (name: PanelName) => {\n                if (!name) return;\n\n                setVisiblePanel((prev) => {\n                    const panelOpen = prev === name;\n\n                    onEvent?.(\n                        name,\n                        panelOpen\n                            ? MOBILE_HEADER_EVENT_NAMES.closeEvent\n                            : MOBILE_HEADER_EVENT_NAMES.openEvent,\n                    );\n\n                    return panelOpen ? null : name;\n                });\n            },\n            [onEvent],\n        );\n\n        const onMobilePanelToggle = useCallback(\n            ({detail}: {detail: MobileHeaderEventOptions}) => {\n                if (typeof detail?.panelName === 'string') {\n                    onPanelToggle(detail?.panelName);\n                }\n            },\n            [onPanelToggle],\n        );\n\n        const onMobilePanelOpen = useCallback(\n            ({detail}: {detail: MobileHeaderEventOptions}) => {\n                if (typeof detail?.panelName === 'string') {\n                    onEvent?.(detail?.panelName, MOBILE_HEADER_EVENT_NAMES.openEvent);\n                    setVisiblePanel(detail?.panelName);\n                }\n            },\n            [onEvent],\n        );\n\n        const onMobilePanelClose = useCallback(\n            ({detail}: {detail: MobileHeaderEventOptions}) => {\n                if (typeof detail?.panelName === 'string') {\n                    onEvent?.(detail?.panelName, MOBILE_HEADER_EVENT_NAMES.closeEvent);\n                    setVisiblePanel(null);\n                }\n            },\n            [onEvent],\n        );\n\n        const onBurgerOpen = useCallback(() => {\n            onEvent?.(BURGER_PANEL_ITEM_ID, MOBILE_HEADER_EVENT_NAMES.openEvent);\n            setVisiblePanel(BURGER_PANEL_ITEM_ID);\n        }, [onEvent]);\n\n        const onBurgerClose = useCallback(() => {\n            onEvent?.(BURGER_PANEL_ITEM_ID, MOBILE_HEADER_EVENT_NAMES.closeEvent);\n            setVisiblePanel(null);\n        }, [onEvent]);\n\n        const onCloseDrawer = useCallback(() => {\n            if (visiblePanel) {\n                onEvent?.(visiblePanel, MOBILE_HEADER_EVENT_NAMES.closeEvent);\n            }\n            setVisiblePanel(null);\n        }, [visiblePanel, onEvent]);\n\n        const onBurgerMenuItemClick = useCallback(\n            (item: MobileMenuItem) => {\n                const closeMenuOnClick = item.closeMenuOnClick ?? true;\n\n                if (closeMenuOnClick) {\n                    onBurgerClose();\n                }\n            },\n            [onBurgerClose],\n        );\n\n        const renderBurgerMenuFooter = useCallback(\n            () =>\n                burgerMenu.renderFooter?.({\n                    size,\n                    isCompact: compact,\n                }),\n            [burgerMenu, size, compact],\n        );\n\n        const onLogoClick = useCallback(\n            (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n                onClosePanel?.();\n                logo.onClick?.(event);\n            },\n            [logo, onClosePanel],\n        );\n\n        const burgerPanelItem: PanelItem = useMemo(\n            () => ({\n                id: BURGER_PANEL_ITEM_ID,\n                content: (\n                    <BurgerMenu\n                        items={burgerMenu.items}\n                        modalItem={burgerMenu.modalItem}\n                        renderFooter={renderBurgerMenuFooter}\n                        onItemClick={onBurgerMenuItemClick}\n                        className={b('burger-menu')}\n                    />\n                ),\n            }),\n            [burgerMenu.items, burgerMenu.modalItem, onBurgerMenuItemClick, renderBurgerMenuFooter],\n        );\n\n        useEffect(() => {\n            const node = targetRef?.current;\n\n            if (node) {\n                node.addEventListener('MOBILE_BURGER_OPEN', onBurgerOpen);\n                node.addEventListener('MOBILE_BURGER_CLOSE', onBurgerClose);\n\n                node.addEventListener(\n                    'MOBILE_PANEL_TOGGLE',\n                    onMobilePanelToggle as unknown as EventListener,\n                );\n                node.addEventListener(\n                    'MOBILE_PANEL_OPEN',\n                    onMobilePanelOpen as unknown as EventListener,\n                );\n                node.addEventListener(\n                    'MOBILE_PANEL_CLOSE',\n                    onMobilePanelClose as unknown as EventListener,\n                );\n            }\n\n            return () => {\n                if (node) {\n                    node.removeEventListener('MOBILE_BURGER_OPEN', onBurgerOpen);\n                    node.removeEventListener('MOBILE_BURGER_CLOSE', onBurgerClose);\n\n                    node.removeEventListener(\n                        'MOBILE_PANEL_TOGGLE',\n                        onMobilePanelToggle as unknown as EventListener,\n                    );\n                    node.removeEventListener(\n                        'MOBILE_PANEL_OPEN',\n                        onMobilePanelOpen as unknown as EventListener,\n                    );\n                    node.removeEventListener(\n                        'MOBILE_PANEL_CLOSE',\n                        onMobilePanelClose as unknown as EventListener,\n                    );\n                }\n            };\n        }, [\n            targetRef,\n            onBurgerClose,\n            onBurgerOpen,\n            onMobilePanelToggle,\n            onMobilePanelOpen,\n            onMobilePanelClose,\n        ]);\n\n        return (\n            <div className={b({compact}, className)} ref={targetRef}>\n                <header className={b('header')} style={{height: size}}>\n                    <Burger\n                        opened={visiblePanel === burgerPanelItem.id}\n                        onClick={() => onPanelToggle(BURGER_PANEL_ITEM_ID)}\n                        className={b('burger')}\n                        closeTitle={burgerCloseTitle}\n                        openTitle={burgerOpenTitle}\n                    />\n                    <MobileLogo {...logo} compact={compact} onClick={onLogoClick} />\n\n                    <div className={b('side-item')}>{sideItemRenderContent?.({size})}</div>\n                </header>\n\n                <Drawer\n                    className={b('panels')}\n                    onVeilClick={onCloseDrawer}\n                    onEscape={onCloseDrawer}\n                    style={{top: size}}\n                >\n                    {[burgerPanelItem, ...panelItems].map((item) => (\n                        <DrawerItem\n                            {...item}\n                            key={item.id}\n                            visible={visiblePanel === item.id}\n                            className={b('panel-item', item.className)}\n                        />\n                    ))}\n                </Drawer>\n\n                <Content\n                    size={size}\n                    renderContent={renderContent}\n                    className={b('content', contentClassName)}\n                    cssSizeVariableName=\"--mobile-header-size\"\n                />\n            </div>\n        );\n    },\n);\n\nMobileHeader.displayName = 'MobileHeader';\n"],"names":["React","jsx","jsxs"],"mappings":"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"}