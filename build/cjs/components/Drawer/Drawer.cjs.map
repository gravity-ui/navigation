{"version":3,"file":"Drawer.cjs","sources":["../../../../src/components/Drawer/Drawer.tsx"],"sourcesContent":["import React from 'react';\n\nimport {Portal, useBodyScrollLock, useForkRef} from '@gravity-ui/uikit';\nimport {CSSTransition, Transition} from 'react-transition-group';\n\nimport {block} from '../utils/cn';\n\nimport {type DrawerDirection, useResizableDrawerItem} from './utils';\n\nimport './Drawer.scss';\n\nconst b = block('drawer');\nconst TIMEOUT = 300;\n\nexport interface DrawerItemProps {\n    /** Unique identifier for the drawer item. */\n    id: string;\n\n    /**\n     * Content to be displayed within the drawer item.\n     * @deprecated Use `children` instead.\n     */\n    content?: React.ReactNode;\n\n    /** Content to be displayed within the drawer item, preferable over the deprecated `content`. */\n    children?: React.ReactNode;\n\n    /** Determines whether the drawer item is visible or hidden. */\n    visible: boolean;\n\n    /** Specifies the direction from which the drawer should slide in, `left` by default.\n     * @default left\n     */\n    direction?: DrawerDirection;\n\n    /** Additional custom class name applied to the drawer item. */\n    className?: string;\n\n    /** Determines whether the drawer item can be resized */\n    resizable?: boolean;\n\n    /**\n     * The width of the resizable drawer item.\n     * If not provided, the width will be stored internally.\n     */\n    width?: number;\n\n    /**\n     * Called at the end of resizing. Can be used to save the new width.\n     * @param width The new width of the drawer item\n     */\n    onResize?: (width: number) => void;\n\n    /** The minimum width of the resizable drawer item */\n    minResizeWidth?: number;\n\n    /** The maximum width of the resizable drawer item */\n    maxResizeWidth?: number;\n}\n\nexport const DrawerItem = React.forwardRef<HTMLDivElement, DrawerItemProps>(\n    function DrawerItem(props, ref) {\n        const {\n            visible,\n            content,\n            children,\n            direction = 'left',\n            className,\n            resizable,\n            width,\n            minResizeWidth,\n            maxResizeWidth,\n            onResize,\n        } = props;\n\n        const itemRef = React.useRef<HTMLDivElement>(null);\n        const handleRef = useForkRef(ref, itemRef);\n        const cssDirection = direction === 'left' ? undefined : direction;\n\n        const {resizedWidth, resizerHandlers} = useResizableDrawerItem({\n            direction,\n            width,\n            minResizeWidth,\n            maxResizeWidth,\n            onResize,\n        });\n\n        const resizerElement = resizable ? (\n            <div className={b('resizer', {direction})} {...resizerHandlers}>\n                <div className={b('resizer-handle')} />\n            </div>\n        ) : null;\n\n        return (\n            <CSSTransition\n                in={visible}\n                timeout={TIMEOUT}\n                unmountOnExit\n                classNames={b('item-transition', {direction: cssDirection})}\n                nodeRef={itemRef}\n            >\n                <div\n                    ref={handleRef}\n                    className={b('item', {direction: cssDirection}, className)}\n                    style={{width: resizable ? `${resizedWidth}px` : undefined}}\n                >\n                    {resizerElement}\n                    {children ?? content}\n                </div>\n            </CSSTransition>\n        );\n    },\n);\n\ntype DrawerChild = React.ReactElement<DrawerItemProps>;\n\nexport interface DrawerProps {\n    /** Child components to be rendered within the drawer. This can be a single child or an array of children. */\n    children: DrawerChild | DrawerChild[];\n\n    /**\n     * Optional flag to prevent the body from scrolling when the drawer is open, `true` by default.\n     * @default true\n     */\n    preventScrollBody?: boolean;\n\n    /** Optional additional class names to style the drawer component. */\n    className?: string;\n\n    /** Optional inline styles to be applied to the drawer component. */\n    style?: React.CSSProperties;\n\n    /** Optional additional class names to style the background veil element. */\n    veilClassName?: string;\n\n    /** Optional callback function that is called when the veil (overlay) is clicked. */\n    onVeilClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n\n    /** Optional callback function that is called when the escape key is pressed, if the drawer is open. */\n    onEscape?: () => void;\n\n    /** Optional flag to hide the background darkening */\n    hideVeil?: boolean;\n\n    /** Optional flag to not use `Portal` for drawer */\n    disablePortal?: boolean;\n}\n\nexport const Drawer: React.FC<DrawerProps> = ({\n    className,\n    veilClassName,\n    children,\n    style,\n    onVeilClick,\n    onEscape,\n    preventScrollBody = true,\n    hideVeil,\n    disablePortal = true,\n}) => {\n    let someItemVisible = false;\n    React.Children.forEach(children, (child) => {\n        if (React.isValidElement<DrawerItemProps>(child) && child.type === DrawerItem) {\n            const childVisible = Boolean(child.props.visible);\n            if (childVisible) {\n                someItemVisible = true;\n            }\n        }\n    });\n\n    React.useEffect(() => {\n        function onKeyDown(event: KeyboardEvent) {\n            if (event.key === 'Escape') {\n                onEscape?.();\n            }\n        }\n        if (someItemVisible) {\n            window.addEventListener('keydown', onKeyDown);\n        }\n        return () => {\n            window.removeEventListener('keydown', onKeyDown);\n        };\n    }, [onEscape, someItemVisible]);\n\n    useBodyScrollLock({enabled: preventScrollBody && someItemVisible});\n\n    const containerRef = React.useRef<HTMLDivElement>(null);\n    const veilRef = React.useRef<HTMLDivElement>(null);\n\n    const drawer = (\n        <Transition\n            in={someItemVisible}\n            timeout={{enter: 0, exit: TIMEOUT}}\n            mountOnEnter\n            unmountOnExit\n            nodeRef={containerRef}\n        >\n            {(state) => {\n                const childrenVisible = someItemVisible && state === 'entered';\n                return (\n                    <div ref={containerRef} className={b({hideVeil}, className)} style={style}>\n                        <CSSTransition\n                            in={childrenVisible}\n                            timeout={TIMEOUT}\n                            unmountOnExit\n                            classNames={b('veil-transition')}\n                            nodeRef={veilRef}\n                        >\n                            <div\n                                ref={veilRef}\n                                className={b('veil', {hidden: hideVeil}, veilClassName)}\n                                onClick={onVeilClick}\n                            />\n                        </CSSTransition>\n                        {React.Children.map(children, (child) => {\n                            if (\n                                React.isValidElement<DrawerItemProps>(child) &&\n                                child.type === DrawerItem\n                            ) {\n                                const childVisible = Boolean(child.props.visible);\n                                return React.cloneElement(child, {\n                                    ...child.props,\n                                    visible: childVisible && childrenVisible,\n                                });\n                            }\n                            return child;\n                        })}\n                    </div>\n                );\n            }}\n        </Transition>\n    );\n\n    if (disablePortal) {\n        return drawer;\n    }\n\n    return <Portal>{drawer}</Portal>;\n};\n"],"names":["block","DrawerItem","useForkRef","useResizableDrawerItem","jsx","CSSTransition","jsxs","useBodyScrollLock","Transition","Portal"],"mappings":"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"}