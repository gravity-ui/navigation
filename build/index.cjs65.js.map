{"version":3,"file":"index.cjs65.js","sources":["../src/components/Settings/collect-settings.ts"],"sourcesContent":["import React from 'react';\n\nimport {IconProps} from '@gravity-ui/uikit';\n\nimport {SettingsSelection} from './Selection/types';\nimport {escapeStringForRegExp, invariant} from './helpers';\n\nexport type SettingsMenu = (SettingsMenuGroup | SettingsMenuItem)[];\n\ninterface SettingsMenuGroup {\n    groupTitle: string;\n    items: SettingsMenuItem[];\n}\n\ninterface SettingsMenuItem {\n    id: string;\n    title: string;\n    icon?: IconProps;\n    withBadge?: boolean;\n    disabled?: boolean;\n}\n\nexport interface SettingsPage {\n    id: string;\n    sections: SettingsPageSection[];\n    hidden?: boolean;\n    withBadge?: boolean;\n}\n\nexport interface SettingsPageSection {\n    id?: string;\n    title: string;\n    header?: React.ReactNode;\n    items: SettingsItem[];\n    hidden?: boolean;\n    withBadge?: boolean;\n    showTitle?: boolean;\n    onlyChild?: boolean;\n}\n\nexport interface SettingsItem {\n    id?: string;\n    title: string;\n    element: React.ReactElement;\n    hidden: boolean;\n    titleComponent?: React.ReactNode;\n    renderTitleComponent?: (highlightedTitle: React.ReactNode | null) => React.ReactNode;\n}\n\nexport interface SelectedSettingsPart {\n    page?: SettingsPage;\n    section?: SettingsPageSection;\n    setting?: SettingsItem;\n}\n\ninterface SettingsDescription {\n    menu: SettingsMenu;\n    pages: Record<string, SettingsPage>;\n}\nexport function getSettingsFromChildren(\n    children: React.ReactNode,\n    searchText = '',\n): SettingsDescription {\n    // 'abc def fg' -> abc.*?cde.*?fg\n    const preparedFilter = escapeStringForRegExp(searchText).replace(/\\s+/g, '.*?');\n    const filterRe = new RegExp(preparedFilter, 'i');\n\n    return getSettingsFromChildrenRecursive(children, '', filterRe);\n}\n\nfunction getSettingsFromChildrenRecursive(\n    children: React.ReactNode,\n    basepath = '',\n    filterRe: RegExp,\n): SettingsDescription {\n    const menu: SettingsMenu = [];\n    const pages: Record<string, SettingsPage> = {};\n    let hasGroup = false;\n    let hasItems = false;\n    React.Children.forEach(children, (element) => {\n        if (!React.isValidElement(element)) {\n            // Ignore non-elements.\n            return;\n        }\n        if (element.type === React.Fragment) {\n            // Transparently support React.Fragment and its children.\n            const {menu: menuFragment, pages: pagesFragment} = getSettingsFromChildrenRecursive(\n                element.props.children,\n                basepath,\n                filterRe,\n            );\n            menu.push(...menuFragment);\n            Object.assign(pages, pagesFragment);\n        } else if (element.props.groupTitle) {\n            if (process.env.NODE_ENV === 'development') {\n                invariant(!hasItems, 'Setting menu must not mix groups and pages on one level');\n            }\n\n            const pageId = `${basepath}/${element.props.id ?? element.props.groupTitle}`;\n            hasGroup = true;\n\n            const {menu: menuFragment, pages: pagesFragment} = getSettingsFromChildrenRecursive(\n                element.props.children,\n                pageId,\n                filterRe,\n            );\n\n            if (process.env.NODE_ENV === 'development') {\n                const hasInnerGroup = menuFragment.some((item) => 'groupTitle' in item);\n                invariant(\n                    !hasInnerGroup,\n                    `Group ${element.props.groupTitle} should not include groups`,\n                );\n            }\n\n            menu.push({\n                groupTitle: element.props.groupTitle,\n                // @ts-ignore\n                items: menuFragment,\n            });\n            Object.assign(pages, pagesFragment);\n        } else {\n            hasItems = true;\n            const pageId = `${basepath}/${element.props.id ?? element.props.title}`;\n\n            if (process.env.NODE_ENV === 'development') {\n                invariant(Boolean(element.props.title), 'Component must include title prop');\n                invariant(!hasGroup, 'Setting menu must not mix groups and pages on one level');\n                invariant(!pages[pageId], `Setting menu page id must be uniq (${pageId})`);\n            }\n\n            pages[pageId] = getSettingsPageFromChildren(element.props.children, filterRe);\n            pages[pageId].id = pageId;\n            menu.push({\n                id: pageId,\n                title: element.props.title,\n                icon: element.props.icon,\n                withBadge: pages[pageId].withBadge,\n                disabled: pages[pageId].hidden,\n            });\n        }\n    });\n    return {menu, pages};\n}\n\nfunction getSettingsPageFromChildren(children: React.ReactNode, filterRe: RegExp): SettingsPage {\n    const page: SettingsPage = {id: '', sections: [], hidden: true};\n    React.Children.forEach(children, (element) => {\n        if (!React.isValidElement(element)) {\n            // Ignore non-elements.\n            return;\n        }\n        if (element.type === React.Fragment) {\n            // Transparently support React.Fragment and its children.\n            const {sections, withBadge, hidden} = getSettingsPageFromChildren(\n                element.props.children,\n                filterRe,\n            );\n            page.sections.push(...sections);\n            page.withBadge = withBadge || page.withBadge;\n            page.hidden = hidden && page.hidden;\n        } else {\n            const {withBadge, showTitle = true} = element.props;\n            const {items, hidden} = getSettingsItemsFromChildren(element.props.children, filterRe);\n            page.withBadge = withBadge || page.withBadge;\n            page.hidden = hidden && page.hidden;\n            page.sections.push({\n                ...element.props,\n                withBadge,\n                items,\n                hidden,\n                showTitle,\n            });\n        }\n    });\n    return page;\n}\n\nfunction getSettingsItemsFromChildren(children: React.ReactNode, filterRe: RegExp) {\n    let hidden = true;\n    const items: SettingsItem[] = [];\n    React.Children.forEach(children, (element) => {\n        if (!React.isValidElement(element)) {\n            // Ignore non-elements.\n            return;\n        }\n        if (element.type === React.Fragment) {\n            // Transparently support React.Fragment and its children.\n            const fragmentItems = getSettingsItemsFromChildren(element.props.children, filterRe);\n            items.push(...fragmentItems.items);\n            hidden = hidden && fragmentItems.hidden;\n        } else {\n            const item: SettingsItem = {\n                ...element.props,\n                element,\n                hidden: !filterRe.test(element.props.title),\n            };\n            items.push(item);\n            hidden = hidden && item.hidden;\n        }\n    });\n    return {items, hidden};\n}\n\nexport function getSelectedSettingsPart(\n    pages: Record<string, SettingsPage>,\n    selection: SettingsSelection,\n): SelectedSettingsPart {\n    if (!selection.settingId && !selection.section && !selection.page) {\n        return {};\n    }\n\n    for (const page of Object.values(pages)) {\n        if (!selection.settingId && !selection.section) {\n            if (selection.page !== page.id) continue;\n\n            return {page};\n        }\n\n        for (const section of page.sections) {\n            if (selection.settingId) {\n                for (const setting of section.items) {\n                    if (setting.id === selection.settingId) {\n                        return {page, section, setting};\n                    }\n                }\n            } else if (\n                selection.section &&\n                ('id' in selection.section\n                    ? selection.section.id === section.id\n                    : selection.section.title === section.title)\n            ) {\n                return {page, section};\n            }\n        }\n    }\n\n    return {};\n}\n"],"names":["escapeStringForRegExp","invariant"],"mappings":"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"}