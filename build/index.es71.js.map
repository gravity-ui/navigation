{"version":3,"file":"index.es71.js","sources":["../src/components/AllPagesPanel/AllPagesPanel.tsx"],"sourcesContent":["import React, {useCallback, useEffect, useRef, useState} from 'react';\n\nimport {Gear} from '@gravity-ui/icons';\nimport {Button, Flex, Icon, List, ListItemData, Text} from '@gravity-ui/uikit';\n\nimport {useAsideHeaderInnerContext} from '../AsideHeader/AsideHeaderContext';\nimport {MenuItem} from '../types';\nimport {block} from '../utils/cn';\n\nimport {AllPagesListItem} from './AllPagesListItem';\nimport {ALL_PAGES_ID} from './constants';\nimport i18n from './i18n';\nimport {useGroupedMenuItems} from './useGroupedMenuItems';\n\nimport './AllPagesPanel.scss';\n\nconst b = block('all-pages-panel');\n\ninterface AllPagesPanelProps {\n    className?: string;\n    startEditIcon?: React.ReactNode;\n    onEditModeChanged?: (isEditMode: boolean) => void;\n}\n\nexport const AllPagesPanel: React.FC<AllPagesPanelProps> = (props) => {\n    const {startEditIcon, onEditModeChanged, className} = props;\n    const {menuItems, onMenuItemsChanged} = useAsideHeaderInnerContext();\n    const menuItemsRef = useRef(menuItems);\n    menuItemsRef.current = menuItems;\n\n    const [isEditMode, setIsEditMode] = useState(false);\n    const toggleEditMode = useCallback(() => {\n        setIsEditMode((prev) => !prev);\n    }, []);\n\n    const groupedItems = useGroupedMenuItems(menuItems);\n\n    useEffect(() => {\n        onEditModeChanged?.(isEditMode);\n    }, [isEditMode, onEditModeChanged]);\n\n    const onItemClick = useCallback((item: ListItemData<MenuItem>) => {\n        //@ts-ignore TODO fix when @gravity-ui/uikit/List will provide event arg on item click\n        item.onItemClick?.(item, false);\n    }, []);\n\n    const togglePageVisibility = useCallback(\n        (item: MenuItem) => {\n            if (!onMenuItemsChanged) {\n                return;\n            }\n            const changedItem: MenuItem = {...item, hidden: !item.hidden};\n\n            const originItems = menuItemsRef.current.filter(\n                (menuItem) => menuItem.id !== ALL_PAGES_ID,\n            );\n            onMenuItemsChanged(\n                originItems.map((menuItem) => {\n                    if (menuItem.id !== changedItem.id) {\n                        return menuItem;\n                    }\n                    return changedItem;\n                }),\n            );\n        },\n        [onMenuItemsChanged],\n    );\n\n    const itemRender = useCallback(\n        (item: ListItemData<MenuItem>, _isActive: boolean, _itemIndex: number) => (\n            <AllPagesListItem\n                item={item}\n                editMode={isEditMode}\n                onToggle={() => togglePageVisibility(item)}\n            />\n        ),\n        [isEditMode, togglePageVisibility],\n    );\n\n    const onResetToDefaultClick = useCallback(() => {\n        if (!onMenuItemsChanged) {\n            return;\n        }\n        const originItems = menuItemsRef.current.filter((item) => item.id !== ALL_PAGES_ID);\n        onMenuItemsChanged(\n            originItems.map((item) => ({\n                ...item,\n                hidden: false,\n            })),\n        );\n    }, [onMenuItemsChanged]);\n    return (\n        <Flex className={b(null, className)} gap=\"5\" direction=\"column\">\n            <Flex gap=\"4\" alignItems=\"center\" justifyContent=\"space-between\">\n                <Text variant=\"subheader-2\">\n                    {isEditMode ? i18n('all-panel.title.editing') : i18n('all-panel.title.main')}\n                </Text>\n                <Button selected={isEditMode} view=\"normal\" onClick={toggleEditMode}>\n                    {startEditIcon ? startEditIcon : <Icon data={Gear} />}\n                </Button>\n            </Flex>\n            <Flex className={b('content')} gap=\"5\" direction=\"column\">\n                {Object.keys(groupedItems).map((category) => {\n                    return (\n                        <Flex key={category} direction=\"column\" gap=\"3\">\n                            <Text className={b('category')} variant=\"body-1\" color=\"secondary\">\n                                {category}\n                            </Text>\n                            <List\n                                virtualized={false}\n                                filterable={false}\n                                items={groupedItems[category]}\n                                onItemClick={onItemClick}\n                                renderItem={itemRender}\n                            />\n                        </Flex>\n                    );\n                })}\n            </Flex>\n            {isEditMode && (\n                <Button onClick={onResetToDefaultClick}>{i18n('all-panel.resetToDefault')}</Button>\n            )}\n        </Flex>\n    );\n};\n"],"names":[],"mappings":"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"}